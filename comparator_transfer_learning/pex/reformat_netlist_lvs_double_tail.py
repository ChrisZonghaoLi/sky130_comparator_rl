#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 16 15:40:32 2024

@author: lizongh2

This script is used to reformat the netlist generated by Xschem so that it can be parsed by Netgen for LVS checking

.subckt double_tail_comp VDD CLK_bar Vout_n Vout_p Di_p Di_n Vin_n Vin_p CLK VSS

"""

import os
import re
import shutil
import yaml

# PWD = os.getcwd()
DOUBLE_TAIL_NETGEN_DIR = '/autofs/fs1.ece/fs1.eecg.tcc/lizongh2/sky130_comparator/netgen/double_tail'

# load circuit device infomation (YAML file generated by the <laygo2_size_converter.py>) 
device_info_dir =  '/autofs/fs1.ece/fs1.eecg.tcc/lizongh2/sky130_comparator/laygo2_workspace_sky130/laygo2_example/double_tail/double_tail_device_size.yaml'
with open(device_info_dir, 'r') as stream:
    device_info = yaml.safe_load(stream) 

# load the schematic netlist from Xschem
with open(f'/autofs/fs1.ece/fs1.eecg.tcc/lizongh2/sky130_comparator/comparator_transfer_learning/pex/simulations/double_tail_comp.spice', "r") as netlist:
    lines = netlist.readlines()

# generate the LVS compatible netlist for netegn
with open(f'{DOUBLE_TAIL_NETGEN_DIR}/schematic/double_tail_comparator_lvs.spice', "w") as netlist:
    for line in lines:
        if line[0:9] == '**.subckt': # uncomment the subckt line
            line = line[2:]
        for i in range(0,len(line)): 
            # write back the discrete transistor size that is compatible with LAYGO2
            if line[i:i+5] == 'W_M1 ': # there is a space here in the end
                line = line.replace('W_M1', f'{device_info["M1"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M1"]["nf"]}')
            if line[i:i+5] == 'W_M2 ': # there is a space here in the end
                line = line.replace('W_M2', f'{device_info["M1"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M1"]["nf"]}')
            if line[i:i+5] == 'W_M3 ': # there is a space here in the end
                line = line.replace('W_M3', f'{device_info["M3"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M3"]["nf"]}')
            if line[i:i+5] == 'W_M4 ': # there is a space here in the end
                line = line.replace('W_M4', f'{device_info["M3"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M3"]["nf"]}')
            if line[i:i+5] == 'W_M5 ': # there is a space here in the end
                line = line.replace('W_M5', f'{device_info["M5"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M5"]["nf"]}')
            if line[i:i+5] == 'W_M6 ': # there is a space here in the end
                line = line.replace('W_M6', f'{device_info["M6"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M6"]["nf"]}')
            if line[i:i+5] == 'W_M7 ': # there is a space here in the end
                line = line.replace('W_M7', f'{device_info["M7"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M7"]["nf"]}')
            if line[i:i+5] == 'W_M8 ': # there is a space here in the end
                line = line.replace('W_M8', f'{device_info["M7"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M7"]["nf"]}')
            if line[i:i+5] == 'W_M9 ': # there is a space here in the end
                line = line.replace('W_M9', f'{device_info["M6"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M6"]["nf"]}')
            if line[i:i+6] == 'W_M10 ': # there is a space here in the end
                line = line.replace('W_M10', f'{device_info["M10"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M10"]["nf"]}')
            if line[i:i+6] == 'W_M11 ': # there is a space here in the end
                line = line.replace('W_M11', f'{device_info["M10"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M10"]["nf"]}')
            if line[i:i+6] == 'W_M12 ': # there is a space here in the end
                line = line.replace('W_M12', f'{device_info["M12"]["W_discrete"]}')
                for j in range(0,len(line)):
                    if line[j:j+4] == 'nf=1':
                        line = line.replace('nf=1', f'nf={device_info["M12"]["nf"]}')
            # remove parameters that Netgen does not understand
            if line[i:i+2] == 'ad':
                line = line[:i-1] + '\n'
                
        if line == '.end\n':
            line = '.ends double_tail_comp\n'
        # remove any comment lines and extra lines that started with "+", and the 'GLOBAL GND'
        if line[0] != "*" and line[0] != '+':
            netlist.write(line)


